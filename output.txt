

Analysis of MERFISH data by Warped Sigmoid, Poisson-Process Mixed-Effects Model (WSPmm)
: 

Loading helper function definitions for preprocessing MERFISH data... 

Loading raw data: 
----------------------------------------

Found 4 HDF5 files.... 
File names:
	mouse 1: /Users/michaelbarkasi/Library/CloudStorage/OneDrive-WashingtonUniversityinSt.Louis/projects_Oviedo_lab/MERFISH/data_SSp//Somatosensory_ACxDev1_CBA-CAJ_FFPE_P12_z0-3_celltyped_filtered_withCCF.hdf5
	mouse 2: /Users/michaelbarkasi/Library/CloudStorage/OneDrive-WashingtonUniversityinSt.Louis/projects_Oviedo_lab/MERFISH/data_SSp//Somatosensory_ACxDev1_CBA-CAJ_FFPE_P18_celltyped_filtered_withCCF.hdf5
	mouse 3: /Users/michaelbarkasi/Library/CloudStorage/OneDrive-WashingtonUniversityinSt.Louis/projects_Oviedo_lab/MERFISH/data_SSp//Somatosensory_ACxDev1_CBA-CAJ_P12_celltyped_filtered_withCCF.hdf5
	mouse 4: /Users/michaelbarkasi/Library/CloudStorage/OneDrive-WashingtonUniversityinSt.Louis/projects_Oviedo_lab/MERFISH/data_SSp//Somatosensory_ACxDev1_CBA-CAJ_P18_celltyped_filtered_withCCF.hdf5
Loading and parsing file for mouse number: 1, 2, 3, 4 

Mean transcript counts per cell for each mouse: 2.84, 3.269, 1.755, 1.977
Mean of means: 2.46
Standard deviation of means: 0.714

Total cells by type (Map My Cells):
------------------------------

      Astro-Epen          CB GABA          CB Glut     CNU-HYa GABA 
            3952               82               19               12 
    CNU-HYa Glut     CNU-LGE GABA     CNU-MGE GABA CTX-CGE/MGE GABA 
               2              671               20             1351 
     DG-IMN Glut         filtered          HY GABA           Immune 
              11            18208               37              331 
      IT-ET Glut         LSX GABA          MB GABA          MB Glut 
           16066               29               79                5 
      MB-HB Sero       MH-LH Glut          MY GABA          MY Glut 
               1               15              430               21 
  NP-CT-L6b Glut      OB-IMN GABA              OEC        OPC-Oligo 
            4922              149               23             1499 
          P GABA  TSCRPT_filtered         Vascular          HY Glut 
             142               99             5914                1 
   HY Gnrh1 Glut           P Glut      Pineal Glut          TH Glut 
               1                2                5               12 
         MB Dopa       OB-CR Glut 
               2                3 
----

Number of mice: 4
Cells per mouse: 13237, 16954, 10444, 13481
Means cells per mouse: 13529
Total cells: 54116

Transforming raw data into laminar and columnar coordinates: 
----------------------------------------

Mouse number 1: 
Performing coordinate transform... 
Grabbing coordinates and defining layers and hemispheres... 
Step 1, centering each patch around the mean point of L5... 
Step 2, rotating each patch so that L4 aligns with the x-axis with anterior in positive y direction... 
Step 3, modeling and flattening laminar curve based on L4... 
Binning transformed coordinates... 
Smoothing bin edges with nonlinear transformation... 
Estimating layer boundaries... 

Mouse number 2: 
Performing coordinate transform... 
Grabbing coordinates and defining layers and hemispheres... 
Step 1, centering each patch around the mean point of L5... 
Step 2, rotating each patch so that L4 aligns with the x-axis with anterior in positive y direction... 
Step 3, modeling and flattening laminar curve based on L4... 
Binning transformed coordinates... 
Smoothing bin edges with nonlinear transformation... 
Estimating layer boundaries... 

Mouse number 3: 
Performing coordinate transform... 
Grabbing coordinates and defining layers and hemispheres... 
Step 1, centering each patch around the mean point of L5... 
Step 2, rotating each patch so that L4 aligns with the x-axis with anterior in positive y direction... 
Step 3, modeling and flattening laminar curve based on L4... 
Binning transformed coordinates... 
Smoothing bin edges with nonlinear transformation... 
Estimating layer boundaries... 

Mouse number 4: 
Performing coordinate transform... 
Grabbing coordinates and defining layers and hemispheres... 
Step 1, centering each patch around the mean point of L5... 
Step 2, rotating each patch so that L4 aligns with the x-axis with anterior in positive y direction... 
Step 3, modeling and flattening laminar curve based on L4... 
Binning transformed coordinates... 
Smoothing bin edges with nonlinear transformation... 
Estimating layer boundaries... 

Initializing Cpp (wspc) model: 
----------------------------------------

warp_precision: 1e-07
eps_: 2.22045e-16
inf_warp: 4.5036e+08
Data structure check passed
Saving tokenized count
Found max bin: 100.000000
Extracted fixed effects:
"hemisphere" "age"
Ref levels:
"left" "12"
Created treatment levels
"ref" "right" "18" "right18"
Created treatment-to-fix translation matrix
Pre-computed weight matrix rows
Extracted parent grouping variables:
"cortex"
Extracted child grouping variables:
"Actbl2" "Actl9" "Bcl11b" "Cux2" "Fezf2" "Nxph3" "Rorb" "Satb2" "Tuba1b" "Tubb2a"
Extracted random-effect grouping variables:
"none" "1" "2" "3" "4"
Extracted tokenized count columns
Grabbed size constants for summed count data, total rows: 20000
Initialized columns for summed count data
Initialized count indexes, number of rows with unique model components: 200
Pre-computing bin masks
Creating summed-count data columns ...
Random level 0, 1/5 complete
Random level 1, 2/5 complete
Random level 2, 3/5 complete
Random level 3, 4/5 complete
Random level 4, 5/5 complete
Extracted non-NA indexes
Making extrapolation pool ...
row: 800/4000
row: 1600/4000
row: 2400/4000
row: 3200/4000
row: 4000/4000
Extrapolated 'none' rows
Took log of observed counts
Estimated change points with LROcp and found initial parameter estimates for fixed-effect treatments
Built initial beta (ref and fixed-effects) matrices
Initialized random effect warping factors
Made and mapped parameter vector
Number of parameters: 460
Constructed grouping variable IDs
Computed size of boundary vector: 1400
Finished initializing wspc object

Estimating model parameters: 
---------------
Forking available and bootstrap requested.... 
If bootstrapping not desired, set bootstraps.num = 0... 

Running MCMC stimulations (single-threaded): 
Checking feasibility of provided parameters
... tpoints found below buffer
Provided parameters not feasible, searching nearby
Initial boundary distance (want to make >0): -5
Numer of evals: 29
Success code: 2
Final boundary distance: 0.172441
Nearby feasible parameters found!
Performing initial fit of full data
Penalized neg_loglik: 19749.7
step: 1/100
step: 10/100
step: 20/100
step: 30/100
step: 40/100
step: 50/100
step: 60/100
step: 70/100
step: 80/100
step: 90/100
All complete!
Acceptance rate (aim for 0.2-0.3): 0.359066

MCMC simulation complete... 
MCMC run time (total), minutes: 0.45
MCMC run time (per retained step), seconds: 0.27
MCMC run time (per step), seconds: 0.135

Running bootstrap fits (with forking): 
Checking feasibility of provided parameters
... no tpoints below buffer
... no negative rates predicted
Provided parameters are feasible
Performing initial fit of full data
Penalized neg_loglik: 19749.7
Batch: 1/10, 0.508239 sec/bs
Batch: 2/10, 0.48669 sec/bs
Batch: 3/10, 0.636634 sec/bs
Batch: 4/10, 0.591789 sec/bs
Batch: 5/10, 0.205489 sec/bs
Batch: 6/10, 0.413172 sec/bs
Batch: 7/10, 0.755919 sec/bs
Batch: 8/10, 0.561558 sec/bs
Batch: 9/10, 0.580918 sec/bs
All complete!

Bootstrap simulation complete... 
Bootstrap run time (total), minutes: 0.924
Bootstrap run time (per sample), seconds: 0.554
Bootstrap run time (per sample, per thread), seconds: 5.542

Setting full-data fit as parameters... 
Checking feasibility of provided parameters
... no tpoints below buffer
... no negative rates predicted
Provided parameters are feasible

Running stats on simulation results: 
----------------------------------------

Grabbing sample results, only resamples with converged fit... 

No samples to analyze... 
Analyzing residuals: 
----------------------------------------

Computing residuals... 
Making masks... 
Making plots and saving stats... 

Log-residual summary by grouping variables (head only):
------------------------------
         group         mean        sd  variance
1          all  0.291542795 0.7363267 0.5421771
2 ran_lvl_none  0.185724877 0.5690329 0.3237984
3    ran_lvl_1 -0.001512353 0.7722667 0.5963958
4    ran_lvl_2  0.149670134 0.7870537 0.6194535
5    ran_lvl_3  0.700560075 0.6924553 0.4794943
6    ran_lvl_4  0.529089162 0.7476714 0.5590125
----


Printing effect distributions: 
----------------------------------------

Warping factors distributions... 
Rate effects distribution... 
Slope effects distribution... 
tpoint effects distribution... 
Making rate-count plots... 

Printing child summary plots: 
----------------------------------------

Making summary plots for cortex: Actbl2
Enter a frame number, or 0 to exit   

 1: wisp(count.data.raw = count.data.WSPmm, variables = data.variables, use.medi
 2: plot.child.summary(wisp.results = results, these.parents = NULL, these.child
 3: do.call(arrangeGrob, c(as.list(p_treatment), ncol = length(p_treatment)))
 4: (function (..., grobs = list(...), layout_matrix, vp = NULL, name = "arrange
 5: lapply(grobs[toconv], ggplot2::ggplotGrob)
 6: FUN(X[[i]], ...)
 7: ggplot_gtable(ggplot_build(x))
 8: attach_plot_env(data$plot$plot_env)
 9: options(ggplot2_plot_env = env)
10: ggplot_build(x)
11: ggplot_build.ggplot(x)
12: by_layer(function(l, d) l$compute_aesthetics(d, plot), layers, data, "comput
13: try_fetch(for (i in seq_along(data)) {
    out[[i]] <- f(l = layers[[i]], d =
14: tryCatch(withCallingHandlers(expr, condition = function(cnd) {
    {
        .
15: tryCatchList(expr, classes, parentenv, handlers)
16: tryCatchOne(expr, names, parentenv, handlers[[1]])
17: doTryCatch(return(expr), name, parentenv, handler)
18: withCallingHandlers(expr, condition = function(cnd) {
    {
        .__handler
19: f(l = layers[[i]], d = data[[i]])
20: l$compute_aesthetics(d, plot)
21: compute_aesthetics(..., self = self)
22: lapply(aesthetics, eval_tidy, data = data, env = env)
23: FUN(X[[i]], ...)
24: .handleSimpleError(function (cnd) 
{
    {
        .__handler_frame__. <- TRUE
 
25: h(simpleError(msg, call))
26: handlers[[1]](cnd)
27: cli::cli_abort(c("Problem while {step}.", i = "Error occurred in the {ordina
28: rlang::abort(message, ..., call = call, use_cli_format = TRUE, .frame = .fra
29: signal_abort(cnd, .file)



Initializing Cpp (wspc) model: 
----------------------------------------

warp_precision: 1e-07
eps_: 2.22045e-16
inf_warp: 4.5036e+08
Data structure check passed
Saving tokenized count
Found max bin: 100.000000
Extracted fixed effects:
"hemisphere" "age"
Ref levels:
"left" "12"
Created treatment levels
"ref" "right" "18" "right18"
Created treatment-to-fix translation matrix
Pre-computed weight matrix rows
Extracted parent grouping variables:
"cortex"
Extracted child grouping variables:
"Actbl2" "Actl9" "Bcl11b" "Cux2" "Fezf2" "Nxph3" "Rorb" "Satb2" "Tuba1b" "Tubb2a"
Extracted random-effect grouping variables:
"none" "1" "2" "3" "4"
Extracted tokenized count columns
Grabbed size constants for summed count data, total rows: 20000
Initialized columns for summed count data
Initialized count indexes, number of rows with unique model components: 200
Pre-computing bin masks
Creating summed-count data columns ...
Random level 0, 1/5 complete
Random level 1, 2/5 complete
Random level 2, 3/5 complete
Random level 3, 4/5 complete
Random level 4, 5/5 complete
Extracted non-NA indexes
Making extrapolation pool ...
row: 800/4000
row: 1600/4000
row: 2400/4000
row: 3200/4000
row: 4000/4000
Extrapolated 'none' rows
Took log of observed counts
Estimated change points with LROcp and found initial parameter estimates for fixed-effect treatments
Built initial beta (ref and fixed-effects) matrices
Initialized random effect warping factors
Made and mapped parameter vector
Number of parameters: 460
Constructed grouping variable IDs
Computed size of boundary vector: 1400
Finished initializing wspc object

Estimating model parameters: 
---------------
Forking available and bootstrap requested.... 
If bootstrapping not desired, set bootstraps.num = 0... 

Running MCMC stimulations (single-threaded): 
Checking feasibility of provided parameters
... tpoints found below buffer
Provided parameters not feasible, searching nearby
Initial boundary distance (want to make >0): -5
Numer of evals: 29
Success code: 2
Final boundary distance: 0.172441
Nearby feasible parameters found!
Performing initial fit of full data
Penalized neg_loglik: 19749.7
step: 1/100
step: 10/100
step: 20/100
step: 30/100
step: 40/100
step: 50/100
step: 60/100
step: 70/100
step: 80/100
step: 90/100
All complete!
Acceptance rate (aim for 0.2-0.3): 0.359066

MCMC simulation complete... 
MCMC run time (total), minutes: 0.45
MCMC run time (per retained step), seconds: 0.27
MCMC run time (per step), seconds: 0.135

Running bootstrap fits (with forking): 
Checking feasibility of provided parameters
... no tpoints below buffer
... no negative rates predicted
Provided parameters are feasible
Performing initial fit of full data
Penalized neg_loglik: 19749.7
Batch: 1/10, 0.496483 sec/bs
Batch: 2/10, 0.496628 sec/bs
Batch: 3/10, 0.618951 sec/bs
Batch: 4/10, 0.612376 sec/bs
Batch: 5/10, 0.211323 sec/bs
Batch: 6/10, 0.427267 sec/bs
Batch: 7/10, 0.761198 sec/bs
Batch: 8/10, 0.540197 sec/bs
Batch: 9/10, 0.559904 sec/bs
All complete!

Bootstrap simulation complete... 
Bootstrap run time (total), minutes: 0.931
Bootstrap run time (per sample), seconds: 0.559
Bootstrap run time (per sample, per thread), seconds: 5.588

Setting full-data fit as parameters... 
Checking feasibility of provided parameters
... no tpoints below buffer
... no negative rates predicted
Provided parameters are feasible

Running stats on simulation results: 
----------------------------------------

Grabbing sample results... 
Grabbing parameter values... 
Computing 95% confidence intervals... 
Estimating p-values from resampled parameters... 

Recommended resample size for alpha = 0.05, 255 tests: 
with bootstrapping/MCMC: 5100
Actual resample size: 101

Stat summary (head only):
------------------------------
                                 parameter   estimate      CI.low    CI.high
1       baseline_cortex_Rt_Actbl2_Tns/Blk1 1.67837727  1.56883891 1.75530139
2   beta_Rt_cortex_Actbl2_right_X_Tns/Blk1 0.21526756  0.03339780 0.25541750
3      beta_Rt_cortex_Actbl2_18_X_Tns/Blk1 0.18903537 -0.01251916 0.23452035
4 beta_Rt_cortex_Actbl2_right18_X_Tns/Blk1 0.04655289 -0.10944068 0.07046959
5       baseline_cortex_Rt_Actbl2_Tns/Blk2 1.35829424  1.30302969 1.47055198
6   beta_Rt_cortex_Actbl2_right_X_Tns/Blk2 0.16114203  0.11135910 0.18667171
     p.value p.value.adj    alpha.adj significance
1         NA          NA           NA             
2 0.00000000    0.000000 0.0001960784          ***
3 0.00000000    0.000000 0.0001968504          ***
4 0.05940594    1.069307 0.0027777778           ns
5         NA          NA           NA             
6 0.00000000    0.000000 0.0001976285          ***
----

Analyzing residuals: 
----------------------------------------

Computing residuals... 
Making masks... 
Making plots and saving stats... 

Log-residual summary by grouping variables (head only):
------------------------------
         group         mean        sd  variance
1          all  0.291542795 0.7363267 0.5421771
2 ran_lvl_none  0.185724877 0.5690329 0.3237984
3    ran_lvl_1 -0.001512353 0.7722667 0.5963958
4    ran_lvl_2  0.149670134 0.7870537 0.6194535
5    ran_lvl_3  0.700560075 0.6924553 0.4794943
6    ran_lvl_4  0.529089162 0.7476714 0.5590125
----


Printing effect distributions: 
----------------------------------------

Warping factors distributions... 
Rate effects distribution... 
Slope effects distribution... 
tpoint effects distribution... 
Making rate-count plots... 

Printing child summary plots: 
----------------------------------------

Making summary plots for cortex: Actbl2, Actl9, Bcl11b, Cux2, Fezf2, Nxph3, Rorb, Satb2, Tuba1b, Tubb2a